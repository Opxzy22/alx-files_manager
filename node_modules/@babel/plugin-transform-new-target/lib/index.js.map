{"version":3,"names":["_helperPluginUtils","require","_core","_default","exports","default","declare","api","assertVersion","name","visitor","MetaProperty","path","meta","get","property","scope","isIdentifier","func","findParent","isClass","isFunction","isArrowFunctionExpression","isClassMethod","kind","buildCodeFrameError","node","t","isMethod","replaceWith","buildUndefinedNode","constructor","memberExpression","thisExpression","identifier","id","generateUidIdentifier","parentPath","hasOwnBinding","bindingIdentifierEquals","rename","parent","conditionalExpression","binaryExpression","cloneNode"],"sources":["../src/index.ts"],"sourcesContent":["import { declare } from \"@babel/helper-plugin-utils\";\nimport { types as t } from \"@babel/core\";\nimport type { NodePath } from \"@babel/traverse\";\n\nexport default declare(api => {\n  api.assertVersion(\n    process.env.BABEL_8_BREAKING && process.env.IS_PUBLISH\n      ? PACKAGE_JSON.version\n      : 7,\n  );\n\n  return {\n    name: \"transform-new-target\",\n\n    visitor: {\n      MetaProperty(path) {\n        const meta = path.get(\"meta\");\n        const property = path.get(\"property\");\n        const { scope } = path;\n\n        if (\n          meta.isIdentifier({ name: \"new\" }) &&\n          property.isIdentifier({ name: \"target\" })\n        ) {\n          const func = path.findParent(path => {\n            if (path.isClass()) return true;\n            if (path.isFunction() && !path.isArrowFunctionExpression()) {\n              if (path.isClassMethod({ kind: \"constructor\" })) {\n                return false;