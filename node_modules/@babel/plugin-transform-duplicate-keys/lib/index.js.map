{"version":3,"names":["_helperPluginUtils","require","_core","getName","key","t","isIdentifier","name","value","toString","_default","exports","default","declare","api","assertVersion","visitor","ObjectExpression","path","node","plainProps","properties","filter","prop","isSpreadElement","computed","alreadySeenData","Object","create","alreadySeenGetters","alreadySeenSetters","isDuplicate","kind","stringLiteral"],"sources":["../src/index.ts"],"sourcesContent":["import { declare } from \"@babel/helper-plugin-utils\";\nimport { types as t } from \"@babel/core\";\n\nfunction getName(\n  key: t.Identifier | t.StringLiteral | t.NumericLiteral | t.BigIntLiteral,\n) {\n  if (t.isIdentifier(key)) {\n    return key.name;\n  }\n  return key.value.toString();\n}\n\nexport default declare(api => {\n  api.assertVersion(\n    process.env.BABEL_8_BREAKING && process.env.IS_PUBLISH\n      ? PACKAGE_JSON.version\n      : 7,\n  );\n\n  return {\n    name: \"transform-duplicate-keys\",\n\n    visitor: {\n      ObjectExpression(path) {\n        const { node } = path;\n        const plainProps = node.properties.filter(\n          prop => !t.isSpreadElement(prop) && !prop.computed,\n        ) as (t.ObjectMethod | t.ObjectProperty)[];\n\n        // A property is a duplicate key if:\n        // * the property is a data property, and is preceded by a data,\n        //   getter, or setter property of the same name.\n        // * the property is a getter property, and is preceded by a data or\n        //   getter property of the same name.\n        // * the property is a setter property, and is preceded by a data or\n        //   setter property of the same name.\n\n        const alreadySeenData = Object.create(null);\n        const alreadySeenGetters = Object.create(null);\n        const alreadySeenSetters = Object.create(null);\n\n        for (const prop of plainProps) {\n          const name = getName(\n            // prop must be non-computed\n            prop.key as\n              | t.Identifier\n              | t.StringLiteral\n              | t.NumericLiteral\n              | t.BigIntLiteral,\n          );\n          let isDuplicate = false;\n          // @ts-expect-error prop.kind is not defined in ObjectProperty\n          switch (prop.kind) {\n            case \"get\":\n              if (alreadySeenData[name] || alreadySeenGetters[name]) {\n                isDuplicate = true;\n              }\n              